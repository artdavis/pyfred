Function libfunct (filters() As Variant) As Long
    ' Custom Wrapper for ApplyFilterToRays FUNCTION
    '
    ' We can't define the function like this:
    '  Function libfunct (filters() As T_RAYFILTEROP) As Long
    ' as Basic will complain of a syntax error.
    ' Neither can we supply filters() variable previously dimensioned
    ' using: Dim filters() As T_RAYFILTEROP.
    ' filters() needs to come in as a variant array with T_RAYFILTEROP elements
    ' We cannot send a Variant array through to ApplyFilterToRays so herein we
    ' have to define a new array of type T_RAYFILTEROP, peel out the data in
    ' the variant array filters(), reassign it into the new array and then run
    ' ApplyFilterToRays with this new array
    '
    ' ApplyFilterToRays is implemented in FRED as a Function.
    ' A VBScript Function has a return value. The return value is the
    ' information of interest and so it is this value which this
    ' wrapper returns.
    '
    ' Description:
    '   This command applies an array of T_RAYFILTEROP data structures
    '   to the active ray buffer and deactivates any rays not meeting
    '   the ray filter requirements.
    '
    ' Returns:
    '   rayCount As Long
    '
    ' Useful in COM programming as:
    '     >>> lib = CreateLib(<path>/ApplyFilterToRays)
    ' (where <path> is the path location for ApplyFilterToRays)
    ' to yield an object that can be called as:
    '     >>> lib.libfunct()
    '
    ' This function overrides the autogenerated wrapper stub so that
    ' it will properly handle receiving an array of T_RAYFILTEROP.
    ' The normal w32 API can only deal with passing through variant arrays.
    Dim dfilters() As T_RAYFILTEROP
    ReDim dfilters(UBound(filters))

    Dim i As Long
    For i=0 To Ubound(filters)
        dfilters(i) = filters(i)
    Next
    libfunct = ApplyFilterToRays(dfilters)
End Function
